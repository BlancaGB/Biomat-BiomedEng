#+TITLE:     Clases y Métodos

#+STARTUP: beamer
#+SETUPFILE: config.org
#+OPTIONS: H:3
#+PROPERTY: header-args :results output :exports both :session R:class :tangle yes :comments org

* OOP en R

*** Programación Orientada a Objetos (OOP)
   - Los objetos encapsulan información y control de su comportamiento (/objects/).
   - Las clases describen propiedades de un grupo de objetos (/class/).
   - Se pueden definir clases a partir de otras (/inheritance/).
   - Una función genérica se comporta de forma diferente atendiendo a la
     clase de uno (o varios) de sus argumentos (/polymorphism/).
*** OOP en R
En =R= coexisten dos implementaciones de la OOP:
   - =S3=: elaboración informal con enfasis en las funciones genéricas y el polimorfismo.
   - =S4=: elaboración formal de clases y métodos.
*** OOP en R
**** Referencias 						    :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:
#+BEGIN_CENTER
- [[http://www.springer.com/gb/book/9780387759357][Software for Data Analysis]] 
- [[http://developer.r-project.org/howMethodsWork.pdf][How Methods Work]]
- [[http://www.stat.auckland.ac.nz/S-Workshop/Gentleman/S4Objects.pdf][S4 classes in 15 pages]]
- [[http://bioconductor.org/help/publications/books/r-programming-for-bioinformatics/][R Programming for Bioinformatics ]]
- [[http://bioconductor.org/help/course-materials/2010/AdvancedR/S4InBioconductor.pdf][S4 System Development in Bioconductor]]
#+END_CENTER

* Clases y métodos S3

** Clases
*** Clases
Los objetos básicos en =R= tienen una clase implícita definida en =S3=. Es accesible con =class=.
#+begin_src R
  x <- rnorm(10)
  class(x)
#+end_src
Pero no tienen atributo...
#+begin_src R
attr(x, 'class')
#+end_src
...ni se consideran formalmente objetos
#+begin_src R
is.object(x)
#+end_src


* Clases y métodos S4

** Clases en =S4=
*** Clases en =S4=
Se construyen con =setClass=, que acepta varios argumentos
  - =Class=: nombre de la clase.
  - =slots=: una lista con las clases de cada componente. Los nombres de este vector corresponden a los nombres de los componentes (=slot=).
  - =contains=: un vector con las clases que esta nueva clase extiende.
  - =prototype=: un objeto proporcionando el contenido por defecto para los componentes definidos en =slots=.
  - =validity=: a función que comprueba la validez de la clase creada con la información suministrada.

*** Datos de ejemplo
Vamos a ilustrar esta sección con datos de seguimiento GPS de gaviotas[fn:1] empleando un extracto del conjunto de datos[fn:2].
#+ATTR_LATEX: :height 0.5\textheight
[[file:figs/73915_lesser-black-backed-gull-with-transmitter.jpg]]

*** Definición de una nueva clase

#+begin_src R
setClass('bird',
         slots = c(
             name = 'character',
             lat = 'numeric',
             lon = 'numeric',
             alt = 'numeric',
             speed = 'numeric',
             time = 'POSIXct')
         )
#+end_src
*** Funciones para obtener información de una clase
#+begin_src R
getClass('bird')
#+end_src
#+begin_src R
getSlots('bird')
#+end_src
#+begin_src R
slotNames('bird')
#+end_src

*** Creación de un objeto con la clase definida
Una vez que la clase ha sido definida con =setClass=, se puede crear un objeto nuevo con =new=. Es habitual definir funciones que construyen y modifican objetos para evitar el uso directo de =new=:
#+begin_src R
readBird <- function(name, path)
{
    csvFile <- file.path(path, paste0(name, ".csv"))

    vals <- read.csv(csvFile)
    
    new('bird',
        name = name,
        lat = vals$latitude,
        lon = vals$longitude,
        alt = vals$altitude,
        speed = vals$speed_2d,
        time = as.POSIXct(vals$date_time)
        )
}  
#+end_src

*** Creación de objetos con la clase definida
#+begin_src R
eric <- readBird("eric", "data")
nico <- readBird("nico", "data")
sanne <- readBird("sanne", "data")
#+end_src

