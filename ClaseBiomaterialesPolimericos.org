#+TITLE:     Biomateriales Poliméricos

#+STARTUP: beamer
#+SETUPFILE: config.org
#+OPTIONS: H:3
#+PROPERTY: header-args :results output :exports both :session R:class :tangle yes :comments org

* Introducción 

*** Historia de los materiales poliméricos

**** Edad Antigua 
   - Los materiales poliméricos de origen natural se comenzaron a utilizar a partir del desarrollo de las primeras civilizaciones. Algunos de los más usados han sido la madera (desde 8000 a.C) para la construcción de viviendas, la seda (dese 3000 a.C.) para fabricar tejidos, o el almidón, resultado de la fotosíntesis de las plantas, como adhesivo en materiales de construcción y fines medicinales. 
  
**** Siglo XIX y principios del XX  
   - En el siglo XIX surgen las primeras teorías científicas sobre las características microestructurales de los materiales poliméricos como estructuras formadas por cadenas moleculares largas. 
   - 1836: Charles Goodyear describe el fenómeno de vulcanización del caucho. El caucho o hule (hidrocarburo con fórmula C5H8) es una sustancia natural caracterizada por su insolubilidad en agua, su resistencia eléctrica y su elasticidad, que se encuentra en forma de suspensión coloidal en el látex. La vulcanización es un proceso mediante el cual se calienta el caucho natural en presencia de azufre, obteniéndose un material más duro e impermeable. Charles Goodyear llamó a este proceso de endurecimiento "vulcanización" en honor al dios griego Vulcano. Investigaciones recientes de finales de 1980s han revleado la presencia de pelotas de hule en un pueblo mesoamericano precolombino, por lo que podría haber sido una civilización pionera en el desarrollo de la vulcanización.
   - 1909: Adolf von Baeyer sintetiza el primer polímero de origen no natural o sintético, la baquelita. Se sintetizó a partir de moléculas de fenol y formaldehído (Proceso de Baekeland). Se aplicó en diversas tecnologías, como carcarsas para teléfonos y radios.
   - 1926: Herman Staudinger (Premio Nobel de Química en 1953) demostró la existencia de las macromoléculas en los materiales poliméricos. Se trata de pequeñas unidades que forman cadenas moleculares. 
   
**** Siglo XX
   - El campo de los materiales polímeros se desarrollo de forma exponencial en el periodo de entreguerras y durante Segunda Guerra mundial. Por ejemplo, se utilizaron plásticos para aislarse de la detección de radares. Además se sintetizaron nuevos poliméricos como el Nylon (1930), el Polietileno (1933) y el Polietileno (1941)
   
*** OOP en R
En =R= coexisten dos implementaciones de la OOP:
   - =S3=: elaboración informal con enfasis en las funciones genéricas y el polimorfismo.
   - =S4=: elaboración formal de clases y métodos.
*** OOP en R
**** Referencias 						    :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:
#+BEGIN_CENTER
- [[http://www.springer.com/gb/book/9780387759357][Software for Data Analysis]] 
- [[http://developer.r-project.org/howMethodsWork.pdf][How Methods Work]]
- [[http://www.stat.auckland.ac.nz/S-Workshop/Gentleman/S4Objects.pdf][S4 classes in 15 pages]]
- [[http://bioconductor.org/help/publications/books/r-programming-for-bioinformatics/][R Programming for Bioinformatics ]]
- [[http://bioconductor.org/help/course-materials/2010/AdvancedR/S4InBioconductor.pdf][S4 System Development in Bioconductor]]
#+END_CENTER

* Clases y métodos S3

** Clases
*** Clases
Los objetos básicos en =R= tienen una clase implícita definida en =S3=. Es accesible con =class=.
#+begin_src R
  x <- rnorm(10)
  class(x)
#+end_src
Pero no tienen atributo...
#+begin_src R
attr(x, 'class')
#+end_src
...ni se consideran formalmente objetos
#+begin_src R
is.object(x)
#+end_src


* Clases y métodos S4

** Clases en =S4=
*** Clases en =S4=
Se construyen con =setClass=, que acepta varios argumentos
  - =Class=: nombre de la clase.
  - =slots=: una lista con las clases de cada componente. Los nombres de este vector corresponden a los nombres de los componentes (=slot=).
  - =contains=: un vector con las clases que esta nueva clase extiende.
  - =prototype=: un objeto proporcionando el contenido por defecto para los componentes definidos en =slots=.
  - =validity=: a función que comprueba la validez de la clase creada con la información suministrada.

*** Datos de ejemplo
Vamos a ilustrar esta sección con datos de seguimiento GPS de gaviotas[fn:1] empleando un extracto del conjunto de datos[fn:2].
#+ATTR_LATEX: :height 0.5\textheight
[[file:figs/73915_lesser-black-backed-gull-with-transmitter.jpg]]

*** Definición de una nueva clase

#+begin_src R
setClass('bird',
         slots = c(
             name = 'character',
             lat = 'numeric',
             lon = 'numeric',
             alt = 'numeric',
             speed = 'numeric',
             time = 'POSIXct')
         )
#+end_src
*** Funciones para obtener información de una clase
#+begin_src R
getClass('bird')
#+end_src
#+begin_src R
getSlots('bird')
#+end_src
#+begin_src R
slotNames('bird')
#+end_src

*** Creación de un objeto con la clase definida
Una vez que la clase ha sido definida con =setClass=, se puede crear un objeto nuevo con =new=. Es habitual definir funciones que construyen y modifican objetos para evitar el uso directo de =new=:
#+begin_src R
readBird <- function(name, path)
{
    csvFile <- file.path(path, paste0(name, ".csv"))

    vals <- read.csv(csvFile)
    
    new('bird',
        name = name,
        lat = vals$latitude,
        lon = vals$longitude,
        alt = vals$altitude,
        speed = vals$speed_2d,
        time = as.POSIXct(vals$date_time)
        )
}  
#+end_src

*** Creación de objetos con la clase definida
#+begin_src R
eric <- readBird("eric", "data")
nico <- readBird("nico", "data")
sanne <- readBird("sanne", "data")
#+end_src




*** Acceso a los slots
A diferencia de =$= en listas y =data.frame=, para extraer información de los /slots/ hay que emplear =@= (pero no es recomendable):
#+begin_src R 
eric@name
#+end_src

#+begin_src R
summary(eric@speed)
#+end_src

*** Clases =S4= con slots tipo lista
#+begin_src R
setClass("flock",
         slots = c(
             name = "character",
             members = "list")
         )

#+end_src

#+begin_src R
notAFlock <- new("flock",
                 name = "flock0",
                 members = list(eric,
                                3,
                                "hello"))
sapply(notAFlock@members, class)
#+end_src

*** Función de validación
#+begin_src R
valida <- function (object) {
    if (any(sapply(object@members,
                   function(x) !is(x, "bird")))) 
        stop("only bird objects are accepted.")
    return(TRUE)
}

setClass("flock",
         slots = c(
             name = "character",
             members = "list"),
         validity = valida
         )
#+end_src

*** Ejemplo de objeto =S4= con slot tipo =list=
#+begin_src R
newFlock <- function(name, ...){
    birds <- list(...)
    new("flock",
        name = name,
        members = birds)
}
#+end_src

#+begin_src R
notAFlock <- newFlock("flock0",
                    eric, 2, "hello")
#+end_src

#+begin_src R
myFlock <- newFlock("flock1",
                    eric, nico, sanne)
#+end_src
** Métodos en =S4=

*** Métodos en =S4=: =setMethod=
- Normalmente se definen con =setMethod= suministrando:
  - la clase de los objetos para /esta/ definición del
    método (=signature=)
  - la función a ejecutar (=definition=).
#+begin_src R
setMethod('show',
          signature = "bird",
          definition = function(object)
          {
              cat("Name: ", object@name, "\n")
              cat("Latitude: ", summary(object@lat), "\n")
              cat("Longitude: ", summary(object@lon), "\n")
              cat("Speed: ", summary(object@speed), "\n")
          })
#+end_src
#+begin_src R
eric
#+end_src

*** Métodos en =S4=: =setMethod=
#+begin_src R
setMethod('show',
          signature = "flock",
          definition = function(object)
          {
              cat("Flock Name: ", object@name, "\n")
              N <- length(object@members)
              lapply(seq_len(N), function(i)
              {
                  cat("Bird #", i, "\n")
                  print(object@members[[i]])
              })
          })
#+end_src

#+begin_src R
myFlock
#+end_src

*** Métodos en =S4=: =setGeneric=
- Es necesario que exista un método genérico ya definido.
#+begin_src R
isGeneric("as.data.frame")
#+end_src
- Si no existe, se define con =setGeneric= (y quizás =standardGeneric=).
#+begin_src R
setGeneric("as.data.frame")
#+end_src
- La función =definition= debe respetar los argumentos de la función genérica y en el mismo orden.
#+begin_src R
getGeneric("as.data.frame")
#+end_src


*** Métodos en =S4=: ejemplo con =as.data.frame=
#+begin_src R
setMethod("as.data.frame",
          signature = "bird",
          definition = function(x, ...)
          {
              data.frame(
                  name = x@name,
                  lat = x@lat,
                  lon = x@lon,
                  alt = x@alt,
                  speed = x@speed,
                  time = x@time)
          })
#+end_src

#+begin_src R
ericDF <- as.data.frame(eric)
#+end_src

*** Métodos en =S4=: ejemplo con =as.data.frame=

**** Ejercicio
Define un método de =as.data.frame= para la clase =flock= a partir del método para la clase =bird=.

*** Métodos en =S4=: ejemplo con =as.data.frame=
#+begin_src R :tangle no
setMethod("as.data.frame",
          signature = "flock",
          definition = function(x, ...)
          {
              dfs <- lapply(x@members, as.data.frame)
              dfs <- do.call(rbind, dfs)
              dfs$flock_name <- x@name
              dfs
          })
#+end_src

#+begin_src R
flockDF <- as.data.frame(myFlock)
#+end_src

*** Métodos en =S4=: ejemplo con =xyplot=
#+begin_src R
library(lattice)

setGeneric("xyplot")

setMethod('xyplot',
          signature = "bird",
          definition = function(x, data = NULL, ...)
          {
              df <- as.data.frame(x)
              xyplot(lat ~ lon, data = df, ...)
          })    
#+end_src

#+begin_src R
xyplot(eric)
#+end_src


*** Métodos en =S4=: ejemplo con =xyplot=
**** Ejercicio
Define un método de =xyplot= para la clase =bird= que permita elegir entre diferentes modos de representación:
- =lontime=
- =lattime=
- =latlon=
- =speed=

*** Métodos en =S4=: ejemplo con =xyplot=

#+begin_src R :tangle no
setMethod('xyplot',
          signature = "bird",
          definition = function(x, data = NULL,
                                mode = "latlon", ...)
          {
              df <- as.data.frame(x)
              switch(mode,
                     lontime = xyplot(lon ~ time, data = df, ...),
                     lattime = xyplot(lat ~ time, data = df, ...),
                     latlon = xyplot(lat ~ lon, data = df, ...),
                     speed = xyplot(speed ~ time, data = df, ...)
                     )
          })    
#+end_src

#+begin_src R
xyplot(eric, mode = "lontime")
#+end_src

*** Métodos en =S4=: ejemplo con =xyplot=
**** Ejercicio
Define un método de =xyplot= para la clase =flock= usando el color para distinguir a los diferentes integrantes (argumento =group= en =xyplot=).

*** Métodos en =S4=: ejemplo con =xyplot=

#+begin_src R :tangle no
setMethod('xyplot',
          signature = "flock",
          definition = function(x, data = NULL, ...)
          {
              df <- as.data.frame(x)
              xyplot(lon ~ lat,
                     group = name,
                     data = df,
                     auto.key = list(space = "right"))
              })
#+end_src

#+begin_src R
xyplot(myFlock)
#+end_src
** Clases =S3= con clases y métodos =S4=

*** Clases =S3= con clases y métodos =S4=
Para usar objetos de clase =S3= en =signatures= de métodos =S4= o
como contenido de =slots= de una clase =S4= hay que registrarlos con
=setOldClass=:
#+begin_src R
setOldClass('lm')
#+end_src

#+begin_src R 
getClass('lm')
#+end_src

*** Ejemplo con =lm= y =xyplot=
Definimos un método genérico para =xyplot=
#+begin_src R
library(lattice)
setGeneric('xyplot')
#+end_src
Definimos un método para la clase =lm= usando =xyplot=.
#+begin_src R
setMethod('xyplot',
          signature = c(x = 'lm',
                        data = 'missing'),
          definition = function(x, data,
                                ...)
          {
              fitted <- fitted(x)
              residuals <- residuals(x)
              xyplot(residuals ~ fitted,...)
          })

#+end_src

*** Ejemplo con =lm= y =xyplot=
Recuperamos la regresión que empleamos en el apartado de Estadística:
#+begin_src R
lmFertEdu <- lm(Fertility ~ Education, data = swiss)
summary(lmFertEdu)
#+end_src


*** Ejemplo con =lm= y =xyplot=

#+begin_src R :exports both :results output graphics :file figs/xyplotS4.pdf
xyplot(lmFertEdu, col='red', pch = 19,
       type = c('p', 'g'))
#+end_src
#+ATTR_LaTeX: :height 0.7\textheight
#+RESULTS:
[[file:figs/xyplotS4.pdf]]

#+begin_src R :exports none :tangle no
remove(myFun.Task, myFun.ToDo3, myFun, myFun.default)
removeMethod("show", 'bird')
removeGeneric("as.data.frame")
removeMethod("as.data.frame", 'bird')
removeMethod("xyplot", 'bird')
removeMethod("xyplot", 'flock')
#+end_src

* Footnotes

[fn:2]https://lifewatch.inbo.be/blog/files/bird_tracking.zip 

[fn:1] https://lifewatch.inbo.be/blog/posts/bird-tracking-data-published.html
